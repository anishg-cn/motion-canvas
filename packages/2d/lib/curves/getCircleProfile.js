import { Vector2 } from '@motion-canvas/core';
import { ArcSegment } from './ArcSegment';
import { LineSegment } from './LineSegment';
export function getCircleProfile(size, startAngle, endAngle, closed, counterclockwise = false) {
    const profile = {
        arcLength: 0,
        minSin: 1,
        segments: [],
    };
    if (endAngle < startAngle) {
        const loops = Math.floor((startAngle - endAngle) / (Math.PI * 2)) + 1;
        endAngle += Math.PI * 2 * loops;
    }
    else if (endAngle > startAngle + Math.PI * 2) {
        const loops = Math.floor((endAngle - startAngle) / (Math.PI * 2));
        endAngle -= Math.PI * 2 * loops;
    }
    const middleAngle = (startAngle + endAngle) / 2;
    const from = size.mul(Vector2.fromRadians(startAngle));
    const to = size.mul(Vector2.fromRadians(endAngle));
    const middle = size
        .mul(Vector2.fromRadians(middleAngle))
        .scale(counterclockwise ? -1 : 1);
    if (closed) {
        addSegment(profile, new LineSegment(Vector2.zero, from));
    }
    addArcSegment(profile, size, from, middle, startAngle, middleAngle, counterclockwise);
    addArcSegment(profile, size, middle, to, middleAngle, endAngle, counterclockwise);
    if (closed) {
        addSegment(profile, new LineSegment(to, Vector2.zero));
    }
    return profile;
}
function addSegment(profile, segment) {
    profile.segments.push(segment);
    profile.arcLength += segment.arcLength;
}
function addArcSegment(profile, size, from, to, fromAngle, toAngle, counterclockwise) {
    const small = Math.abs(fromAngle - toAngle) <= 180 ? 1 : 0;
    const flip = fromAngle > toAngle ? 0 : 1;
    const counter = counterclockwise ? 0 : 1;
    addSegment(profile, new ArcSegment(from, size, 0, 0, small ^ counter ^ flip, to));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q2lyY2xlUHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jdXJ2ZXMvZ2V0Q2lyY2xlUHJvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFNUMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUV4QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsSUFBYSxFQUNiLFVBQWtCLEVBQ2xCLFFBQWdCLEVBQ2hCLE1BQWUsRUFDZixnQkFBZ0IsR0FBRyxLQUFLO0lBRXhCLE1BQU0sT0FBTyxHQUFpQjtRQUM1QixTQUFTLEVBQUUsQ0FBQztRQUNaLE1BQU0sRUFBRSxDQUFDO1FBQ1QsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDO0lBRUYsSUFBSSxRQUFRLEdBQUcsVUFBVSxFQUFFO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLFFBQVEsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDakM7U0FBTSxJQUFJLFFBQVEsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ2pDO0lBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sTUFBTSxHQUFHLElBQUk7U0FDaEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEMsSUFBSSxNQUFNLEVBQUU7UUFDVixVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMxRDtJQUVELGFBQWEsQ0FDWCxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksRUFDSixNQUFNLEVBQ04sVUFBVSxFQUNWLFdBQVcsRUFDWCxnQkFBZ0IsQ0FDakIsQ0FBQztJQUNGLGFBQWEsQ0FDWCxPQUFPLEVBQ1AsSUFBSSxFQUNKLE1BQU0sRUFDTixFQUFFLEVBQ0YsV0FBVyxFQUNYLFFBQVEsRUFDUixnQkFBZ0IsQ0FDakIsQ0FBQztJQUVGLElBQUksTUFBTSxFQUFFO1FBQ1YsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDeEQ7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsT0FBcUIsRUFBRSxPQUFnQjtJQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUNwQixPQUFxQixFQUNyQixJQUFhLEVBQ2IsSUFBYSxFQUNiLEVBQVcsRUFDWCxTQUFpQixFQUNqQixPQUFlLEVBQ2YsZ0JBQXlCO0lBRXpCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxJQUFJLEdBQUcsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLFVBQVUsQ0FDUixPQUFPLEVBQ1AsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssR0FBRyxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUM3RCxDQUFDO0FBQ0osQ0FBQyJ9